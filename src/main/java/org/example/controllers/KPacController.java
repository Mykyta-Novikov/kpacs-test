package org.example.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.db.KPacsRepository;
import org.example.db.records.KPac;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

/**
 * Controller for {@code /kpacs/} page, as well as adding and deleting K-PACs.
 */
@Controller
public class KPacController {
    private final KPacsRepository repository;
    private final ObjectMapper objectMapper;

    @Autowired
    public KPacController(KPacsRepository repository, ObjectMapper objectMapper) {
        this.repository = repository;
        this.objectMapper = objectMapper;
    }

    /**
     * Handler method for {@code /kpacs/} page.
     * @return List of {@link KPac}, serialized as JSON.
     * @throws JsonProcessingException When return value cannot be properly serialized.
     */
    @GetMapping("/kpacs")
    @ModelAttribute("kpacs")
    public String kPacs() throws JsonProcessingException {
        return objectMapper.writeValueAsString(repository.getAll());
    }

    /**
     * Handler method for adding new K-PACs.
     * @param kPac Request body, deserialized as {@link KPac}.
     * For this purpose, {@code id} and {@code creationTime} are ignored as they are autogenerated by the database.
     * @return Inserted {@link KPac} with new {@code id} and {@code creationDate}.
     */
    @PostMapping("/kpac")
    @ResponseBody
    @ResponseStatus(HttpStatus.CREATED)
    public KPac addKPac(@RequestBody KPac kPac) {
        return repository.add(kPac);
    }

    /**
     * Handler method for deleting K-PACs.
     * @param id Path variable corresponding to {@code {@link KPac}.id}
     * @return Sets appropriate status code: {@code NO CONTENT} for success or {@code NOT FOUND} for failure.
     * Response body is not used.
     */
    @DeleteMapping ("/kpac/{id}")
    public ResponseEntity<Void> deleteKPac(@PathVariable int id) {
        var hasBeenDeleted = repository.delete(id);
        return ResponseEntity.status(hasBeenDeleted ? HttpStatus.NO_CONTENT : HttpStatus.NOT_FOUND).build();
    }
}
